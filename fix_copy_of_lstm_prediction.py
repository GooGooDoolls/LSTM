# -*- coding: utf-8 -*-
"""FIX_Copy of lstm prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZcXC2Z6sf0m4LuXE600Mx3VLxeKk5X7Y
"""

!pip install keras-tcn
!pip install keras-tcn --no-dependencies

!pip install keras
!pip install keras-tuner

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.layers import Dropout
from kerastuner.tuners import RandomSearch
from kerastuner.engine.hyperparameters import HyperParameter
from sklearn.metrics import mean_absolute_error, mean_squared_error

import math
import numpy as np
import pandas as pd

# Import libraries
import math
import numpy as np
import pandas as pd
import pandas_datareader as web
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

import yfinance as yf

# Menggunakan fungsi yf.download() untuk mendapatkan data
data_saham = yf.download('ASII.JK', start='2013-01-01', end='2023-12-31')

# Menampilkan 5 baris pertama dari data
print(data_saham)

data_saham.to_excel('data_astra_10tahun.xlsx', index=True)

asii=pd.read_excel('data_astra_10tahun.xlsx',index_col=0)

asii

import matplotlib.pyplot as plt
plt.figure(figsize=(20,10))
plt.plot(asii['Close'])
plt.title ('Saham Astra Closing Price',fontsize=24)
plt.xlabel('Days')
plt.ylabel('Close Price')
plt.show()

# Get only the close price
asii = asii[['Close']]
asii.head()
asii

#convert dataframe menjadi numpy array
asii=asii.values

training_data_len = math.ceil(len(asii) * .80)
training_data_len

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0, 1))
scaled_data=scaler.fit_transform(asii)
scaled_data



train_data = scaled_data[0:training_data_len, :]

# Split the data into x_train and y_train
# x_train is independent variable, y_train is dependentt variable
x_train = []
y_train = []
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  if i <= 61:
    print(x_train)
    print(y_train)

# Convert the x_train and y_train to numpy array
x_train, y_train = np.array(x_train), np.array(y_train)

# Reshape the dataset
# LSTM network expect to be 3 dimentional input
# Shape:(number of samples, number of time steps, number of feature)
x_train=np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

def build_lstm_model(hp):
    model = Sequential()
    model.add(LSTM(units=hp.Int('units_1', min_value=64, max_value=128, step=32),
                   return_sequences=True,
                   input_shape=(x_train.shape[1], 1)))
    model.add(Dropout(rate=hp.Float('dropout_1', min_value=0.1, max_value=0.4, step=0.1)))
    model.add(LSTM(units=hp.Int('units_2', min_value=64, max_value=128, step=32),
                   return_sequences=False))
    model.add(Dropout(rate=hp.Float('dropout_2', min_value=0.0, max_value=0.5, step=0.1)))
    model.add(Dense(units=hp.Int('dense_units', min_value=16, max_value=64, step=16),
                    activation=hp.Choice('dense_activation', values=['relu', 'tanh', 'sigmoid'])))
    model.add(Dense(units=1))

    optimizer_choice = hp.Choice('optimizer', values=['adam', 'rmsprop', 'sgd'])
    learning_rate = hp.Float('learning_rate', min_value=1e-4, max_value=1e-2, sampling='log')

    if optimizer_choice == 'adam':
        optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)
    elif optimizer_choice == 'rmsprop':
        optimizer = tf.keras.optimizers.RMSprop(learning_rate=learning_rate)
    else:
        optimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate)

    model.compile(optimizer=optimizer, loss='mean_squared_error',
                  metrics=['mae', 'mse', tf.keras.metrics.RootMeanSquaredError()])

    epochs = hp.Int('epochs', min_value=10, max_value=100, step=10)
    return model, epochs

from sklearn.model_selection import train_test_split

x_train, x_val, y_train, y_val = train_test_split(x_data, y_data, test_size=0.2, random_state=42)

tuner = RandomSearch(
    build_lstm_model,
    objective='val_loss',
    max_trials=5,
    executions_per_trial=1,
    directory='my_dir',
    project_name='helloworld')

tuner.search_space_summary()

tuner.search(x_train, y_train,
             epochs=50,
             validation_data=(x_val, y_val))

# Training the LSTM model
tuner.search(x_train, y_train, epochs=10, validation_data=(x_train, y_train))

best_hyperparameters = tuner.get_best_hyperparameters(num_trials=1)[0]
print(f"Best Hyperparameters: {best_hyperparameters}")

best_model = tuner.get_best_models(num_models=1)[0]

print("Best Hyperparameters:", best_hyperparameters.get_config())

import pandas as pd
from tabulate import tabulate

best_hyperparameters_dict = best_hyperparameters.get_config()['values']

df = pd.DataFrame(list(best_hyperparameters_dict.items()), columns=['Hyperparameter', 'Value'])

table = tabulate(df, headers='keys', tablefmt='pretty', showindex=False)

# Menampilkan tabel
print("Best Hyperparameters:")
print(table)



#testing dataset
test_data=scaled_data[training_data_len== 60:, :]

#membuat dataset x_tes dan y_test
x_test = []
y_test = asii[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

# Convert the data to numpy array
x_test = np.array(x_test)
x_test

# Reshape the dataset
# LSTM network expect to be 3 dimentional input
# Shape:(number of samples, number of time steps, number of feature)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1],1))
x_test.shape

predictions = best_model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

predictions

lstm_prediction = scaler.inverse_transform(predictions)

lstm_prediction

df=pd.read_excel('data_astra_10tahun.xlsx',index_col=0)
df

import pandas as pd
# Get only the close price
df = df[['Close']]
df.head()
df

mae = mean_absolute_error(df['Close'][-len(predictions):], predictions)
mse = mean_squared_error(df['Close'][-len(predictions):], predictions)
rmse = np.sqrt(mse)
print(f"MAE: {mae}, MSE: {mse}, RMSE: {rmse}")

dates = df.index
plt.figure(figsize=(20, 10))
plt.plot(dates, df['Close'], label='Actual Close Price')
plt.plot(dates[-len(predictions):], predictions, label='Predicted Close Price')
plt.title('Prediksi Saham Astra Closing Price Menggunakan Algoritma LSTM')
plt.xlabel('Year')
plt.ylabel('Close Price')
plt.legend()
plt.show()

last_60_days = scaled_data[-120:]

input_data = scaler.transform(last_60_days)

input_data = np.reshape(input_data, (1, input_data.shape[0], 1))

predicted_prices = []

for _ in range(7):
    # Gunakan model untuk memprediksi
    predicted_scaled_price = best_model.predict(input_data)

    # Simpan hasil prediksi
    predicted_prices.append(predicted_scaled_price[0, 0])

    # Update data input untuk prediksi berikutnya
    input_data = np.reshape(input_data, (input_data.shape[1], input_data.shape[2]))
    input_data = np.append(input_data[1:], [[predicted_scaled_price[0, 0]]], axis=0)
    input_data = np.reshape(input_data, (1, input_data.shape[0], 1))

predicted_prices = scaler.inverse_transform(np.array([predicted_prices]).reshape(-1, 1))

print("Predicted Prices for the Next 7 Days:")
print(predicted_prices)

predicted_prices_original_scale = scaler.inverse_transform(predicted_prices)

print("Predicted Prices for the Next 7 Days (Original Scale):")
print(predicted_prices_original_scale)

dates = df.index
plt.figure(figsize=(20, 10))
plt.plot(dates, df['Close'], label='Actual Close Price')
plt.plot(dates[-len(predictions):], predictions, label='Predicted Close Price')
plt.title('Prediksi Saham Astra Closing Price Menggunakan Algoritma LSTM')
plt.xlabel('Year')
plt.ylabel('Close Price')
plt.legend()
plt.show()

from sklearn.metrics import mean_absolute_error, mean_squared_error
import math

# Menghitung MAE
mae = mean_absolute_error(df['Close'][-len(lstm_prediction):], lstm_prediction)

# Menghitung MSE
mse = mean_squared_error(df['Close'][-len(lstm_prediction):], lstm_prediction)

# Menghitung RMSE
rmse = math.sqrt(mse)

print("MAE:", mae)
print("MSE:", mse)
print("RMSE:", rmse)

from sklearn.metrics import r2_score

# Menghitung R-squared
r2 = r2_score(df['Close'][-len(lstm_prediction):], lstm_prediction)
print("R-squared:", r2)



# Menggabungkan data harga penutupan dengan hasil prediksi LSTM

